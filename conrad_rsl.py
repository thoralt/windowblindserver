# -*- coding: utf-8 -*-

# prescaler = 18875
# SPI speed = 250 MHz / prescaler = 13245 Hz
# 1 Tick = 604 us (8 SPI bits)
#
# Timing:  "0" bit                          "1" bit                      pause after last bit
# SPI data: 0xFF  0x00  0x00                0xFF  0xFF  0x00             0x00 * 9
#           _____              __ ...       ____________       __ ... __                      ____
#          |     |            |            |            |     |         |                    |
# ... _____|     |____________|   ... _____|            |_____|         |_________ .... _____|
#          .     .            .            .            .     .         .                    .
#          .     .            .            .            .     .         .                    .
# us:      |<604>|<---1208--->|            |<---1208--->|<604>|         |<-------5400------->|
# Ticks:   |<-1->|<-----2---->|            |<----2----->|<-1->|         |<---------9-------->|
# us:      |<------1812------>|            |<------1812------>|
# Ticks:   |<--------3------->|            |<--------3------->|
#

import wiringpi2 as wiringpi
import sys, threading, time, traceback

#==============================================================================================================
#==============================================================================================================
class Conrad_RSL:
    SPI_CHANNEL = 1
    SPI_SPEED = 13075 # 13246
    ZERO = '\xFF\x00\x00'
    ONE  = '\xFF\xFF\x00'
    counterValues = [ZERO+ZERO, ONE+ZERO, ZERO+ONE, ONE+ONE]
    codes = {
        "1.1-up": '0011101000011010010101000000000',
        "1.1-dn": '0000011000011010010101000000000',
        "1.2-up": '1001101000011010010101000000000',
        "1.2-dn": '1011101000011010010101000000000',
        "1.3-up": '0101101000011010010101000000000',
        "1.3-dn": '0111101000011010010101000000000',
        "2.1-up": '0001011000011010010101000000000',
        "2.1-dn": '0011011000011010010101000000000',
        "2.2-up": '1010011000011010010101000000000',
        "2.2-dn": '1001011000011010010101000000000',
        "2.3-up": '0110011000011010010101000000000',
        "2.3-dn": '0101011000011010010101000000000',
        "3.1-up": '0010001000011010010101000000000',
        "3.1-dn": '0001001000011010010101000000000',
        "3.2-up": '1000001000011010010101000000000',
        "3.2-dn": '1010001000011010010101000000000',
        "3.3-up": '0100001000011010010101000000000',
        "3.3-dn": '0110001000011010010101000000000',
        "4.1-up": '0000101000011010010101000000000',
        "4.1-dn": '0010101000011010010101000000000',
        "4.2-up": '1011001000011010010101000000000',
        "4.2-dn": '1000101000011010010101000000000',
        "4.3-up": '0111001000011010010101000000000',
        "4.3-dn": '0100101000011010010101000000000'
    }


    #----------------------------------------------------------------------------------------------------------
    #----------------------------------------------------------------------------------------------------------
    def __init__(self):
        self.counter = 0
        self.devices = []
        wiringpi.wiringPiSetup()
        wiringpi.wiringPiSPISetup(self.SPI_CHANNEL, self.SPI_SPEED)


    #----------------------------------------------------------------------------------------------------------
    #----------------------------------------------------------------------------------------------------------
    def addDevice(self, device):
        device.commandManager = self
        self.devices.append(device)

    #----------------------------------------------------------------------------------------------------------
    #----------------------------------------------------------------------------------------------------------
    def sendCode(self, bits):
        global counter, ZERO, ONE, counteValues
        self.counter += 1

        print 'Sending code ' + bits + ':',
        sys.stdout.flush()

        # repeat 5 times
        buf = ''
        for x in range(0, 5):
            buf += self.counterValues[self.counter & 3]
            for bit in bits:
                if bit == '0':
                    buf += self.ZERO
                else:
                    buf += self.ONE

            # add padding for pause between packets
            buf += '\x00\x00\x00\x00\x00\x00\x00\x00\x00'

        # send the packet
#        wiringpi.wiringPiSPIDataRW(self.SPI_CHANNEL, buf)
        print 'OK - WARNING: DEBUG MODE, DID NOT ACTUALLY TRANSMIT DATA'
#        print 'OK'

    #----------------------------------------------------------------------------------------------------------
    #----------------------------------------------------------------------------------------------------------
    def moveToPosition(self, address, targetPosition):
        # look up device address
        device = None
        for d in self.devices:
            if d.address == address:
                device = d

        # device not in list?
        if device is None:
            print 'Device not found: ' + address
            return False

        print 'Conrad_RSL.moveToPosition(\'%s\', %.1f): Found device \'%s\'' % \
            (address, targetPosition, device.name)
        return device.moveToPosition(targetPosition)

    #----------------------------------------------------------------------------------------------------------
    #----------------------------------------------------------------------------------------------------------
    def sendCmd(self, cmd):
        if cmd in self.codes:
            self.sendCode(self.codes[cmd])
            return True
        else:
            return False
